import json
import threading
from time import sleep, time
from app.bot.handlers import waiting_for_response, users_status_service
from app.bot.handlers.murkup_button import get_keyboard, send_categories, get_markup_counters, get_markup_services
from classifier.base_classifier import process_callback_data
from classifier.base_classifier import classify_type_llm
from llm.prompt_manager import process_user_request, include_headers_llm, memory_validation_llm, get_meter_readings_llm, \
    classify_query_with_llm
from utils.document_utils import search_by_header, extract_headers
from utils.tokens import validate_count_tokens
from config import bot
from utils.save_load import load_user_data, save_memory_chat, get_last_message, save_user_data

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    print("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@bot.message_handler(content_types=['photo'])
def handle_photo_and_text(message):
    print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler()
def texts(message):
    print(123)
    global save_message
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É—Å–ª—É–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if users_status_service.get(user_id, False):
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥–∏")
        handle_user_message(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∞
    if waiting_for_response.get(user_id, False):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å.")
        return

    user_data = load_user_data(user_id) #–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î!!!

    if user_data is None:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return

    if user_data["category_dialog"] == "":
        send_categories(message)
        return

    if message.text == "üîÑ–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç":
        last_message = get_last_message(user_id)
        message_copy = message
        message_copy.text = last_message
        forming_response(user_id, message_copy)
        return
    elif message.text == "‚ùî–ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã":
        keyboard = get_keyboard(user_id)
        bot.send_message(message.chat.id, "–í–æ—Ç –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã" , reply_markup=keyboard)
        return


    if validate_count_tokens(message.text, 500):
        bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ")
        return

    if not validate_count_tokens(message.text, 100):
        memory = user_data.get('memory', [])  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        for word in ["–∑–∞–ø–æ–º–Ω–∏", "—Å–æ—Ö—Ä–∞–Ω–∏", "–Ω–µ –∑–∞–±—É–¥—å"]:
            if word in message.text.lower():
                # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –ø–æ–ª–Ω–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if len(memory) >= 10:
                    bot.send_message(message.chat.id, "–ü–∞–º—è—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞! –û—á–∏—Å—Ç–∏—Ç–µ –ª–∏—à–Ω–µ–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–ø–∞–º—è—Ç—å'")
                    return

                memory_response = memory_validation_llm(message.text)
                #memory_validation = json.loads(memory_response)
                print(f"–†–µ–∑-—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {memory_response}")
                if memory_response["is_acceptable"]:
                    user_data['memory'].append(memory_response["compressed_text"])  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    save_user_data(user_id, user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
                    bot.send_message(message.chat.id, "–ü–∞–º—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    bot.send_message(message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥–æ–±–∞—é—â–∏—Ö –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–µ–º.")
                    return
    else:
        bot.send_message(message.chat.id, "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –±—ã –µ–≥–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å")

    forming_response(user_id, message)


def handle_user_message(message):
    start_time = time()
    sent_message = bot.send_message(message.chat.id, "–î—É–º–∞—é... –û–ø—Ä–µ–¥–µ–ª—è—é –æ–±—Ä–∞—â–µ–Ω–∏–µ")

    # –°–æ–∑–¥–∞—ë–º —Ä–∞–∑–¥–µ–ª—è–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    shared_text = SharedText("–î—É–º–∞—é... –û–ø—Ä–µ–¥–µ–ª—è—é –æ–±—Ä–∞—â–µ–Ω–∏–µ")

    # –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=animate_status_typing, args=(sent_message, shared_text))
    thread.start()

    print(start_time)
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}")
    user_id = message.from_user.id
    if message.text:
        classify_type = classify_type_llm(message.text)

        # –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ - —É—Å–ª—É–≥–∞
        if classify_type:
            shared_text.update_text("–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É")
            if sent_message.text != "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                bot.edit_message_text(chat_id=sent_message.chat.id, message_id=sent_message.message_id, text="–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É")
            meter_readings = get_meter_readings_llm(message.text)
            if meter_readings['category'] != 'unknown':
                users_status_service[user_id] = meter_readings['category']
                process_callback_data(user_id, message.chat.id, users_status_service[user_id], meter_readings)

                bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)
            else:
                shared_text.update_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:")
                markup = get_markup_services()
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=markup)
        else:
            shared_text.update_text("–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å")
            if sent_message.text != "–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                bot.edit_message_text(chat_id=sent_message.chat.id, message_id=sent_message.message_id, text="–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å")

            # –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ - –≤–æ–ø—Ä–æ—Å
            process_query(user_id, message)

            bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)
    end_time = time()
    result_time = end_time - start_time
    print(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result_time}")
    waiting_for_response[user_id] = False


def forming_response(user_id, message):
    waiting_for_response[message.from_user.id] = True
    thread = threading.Thread(target=handle_user_message, args=(message,))
    thread.start()
    typing_thread = threading.Thread(target=send_typing_action, args=(message.chat.id, message.from_user.id))
    typing_thread.start()

def process_query(user_id, message):
    headers = extract_headers(user_id)  # –ó–∞–ø—Ä–æ—Å —è–≤–ª—è–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å–æ–º
    llm_headers = include_headers_llm(message.text, headers)  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ LLM –º–æ–¥–µ–ª—å—é
    doc_text = search_by_header(llm_headers["commands"], user_id)  # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    llm_answer = process_user_request(message.text, doc_text)  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ LLM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    save_memory_chat(message, llm_answer)
    keyboard = get_keyboard(message.from_user.id)
    bot.send_message(message.chat.id, llm_answer, reply_markup=keyboard)

def send_typing_action(chat_id, user_id):
    while waiting_for_response.get(user_id, False):
        bot.send_chat_action(chat_id, 'typing')
        sleep(2)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã


# –†–∞–∑–¥–µ–ª—è–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
class SharedText:
    def __init__(self, text):
        self.text = text
        self.lock = threading.Lock()

    def update_text(self, new_text):
        with self.lock:
            self.text = new_text

    def get_text(self):
        with self.lock:
            return self.text

def animate_status_typing(sent_message, shared_text, change_time=0.5):
    """
    –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        sent_message: –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è.
        shared_text: –†–∞–∑–¥–µ–ª—è–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏.
        change_time: –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∞–Ω–∏–º–∞—Ü–∏—è–º–∏.
    """
    try:
        reverse_animate_typing = False
        while sent_message is not None:
            base_text = shared_text.get_text()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            if not reverse_animate_typing:
                for i in range(1, 4):  # –¶–∏–∫–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
                    bot.edit_message_text(
                        chat_id=sent_message.chat.id,
                        message_id=sent_message.message_id,
                        text=base_text + "." * i
                    )
                    sleep(change_time)
                reverse_animate_typing = True
            else:
                bot.edit_message_text(
                    chat_id=sent_message.chat.id,
                    message_id=sent_message.message_id,
                    text=base_text
                )
                sleep(change_time)
                reverse_animate_typing = False
    except Exception:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –¢–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
