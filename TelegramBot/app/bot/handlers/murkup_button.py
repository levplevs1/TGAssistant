from app.bot.handlers.llm_response_handler import forming_response
from classifier.base_classifier import process_callback_data
from config import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.bot.handlers import users_status_service, waiting_for_response, last_memory_message_id
from utils.save_load import save_category_dialog, search_query_by_response, load_user_data, save_user_data


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
@bot.message_handler(commands=["menu"])
def send_categories(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = InlineKeyboardMarkup()

    markup.add(InlineKeyboardButton("–ñ–ö–•", callback_data="–ñ–ö–•")),
    markup.add(InlineKeyboardButton("–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", callback_data="–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"))
    markup.add(InlineKeyboardButton("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"))
    markup.add(InlineKeyboardButton("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ù–∞–ø–∏—à–∏—Ç–µ:\n–û–ø–ª–∞—Ç–∏ (—Ç–æ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å): –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å —Å—á–µ—Ç—á–∏–∫–∞ - (–ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–æ —Å—á–µ—Ç—á–∏–∫–∞ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã)")
    elif call.data == '–≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ':
        markup = get_markup_like_dislike_change()
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    elif call.data == 'change':
        last_message = search_query_by_response(user_id=call.from_user.id, response=call.message.text)

        class Message:
            def __init__(self, data):
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ –æ–±—ä–µ–∫—Ç—ã
                for key, value in data.items():
                    if isinstance(value, dict):
                        setattr(self, key, Message(value))
                    else:
                        setattr(self, key, value)

        message_copy = {
                        "is_copy": True,
                        "message_id": int,
                        "from_user": {
                            "id": call.from_user.id,
                        },
                        "chat": {
                            "id": call.message.chat.id,
                        },
                        "text": last_message,
                    }

        message_copy = Message(message_copy)
        if waiting_for_response[call.from_user.id] == False:
            forming_response(message_copy, load_user_data(call.from_user.id))
        else:
            bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å.")
    elif call.data == 'like':
        print('like')
    elif call.data == 'dislike':
        print('dislike')
    elif call.data == "–ñ–ö–•":
        save_category_dialog(call.from_user.id, call.data)
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –ñ–ö–•")
    elif call.data == "–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ":
        save_category_dialog(call.from_user.id, call.data)
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    elif call.data == "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ":
        save_category_dialog(call.from_user.id, call.data)
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    elif call.data == "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        save_category_dialog(call.from_user.id, call.data)
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    elif any(word in call.data for word in ['–≥–∞–∑', '–≤–æ–¥–∞', '–æ—Ç–æ–ø–ª–µ–Ω–∏–µ', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ']):
        process_callback_data(call.from_user.id, call.message.chat.id, call.data, None)
    elif call.data == '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å':
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    elif call.data == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å':
        user_service = users_status_service.get(call.from_user.id, None)

        if user_service is None:
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏")
            return

        stub(call.message.chat.id, user_service, call.from_user.id)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    else:
        user_data = load_user_data(call.from_user.id)
        memory = user_data.get('memory', [])
        try:
            index_to_delete = int(call.data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int: {e}")
            return

        user_id = call.from_user.id
        user_data = load_user_data(user_id)

        if user_data is None:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —É–¥–∞–ª—è–µ—Ç—Å—è –ø–∞–º—è—Ç—å, —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ø–∞–º—è—Ç—å—é
        if call.message.message_id != last_memory_message_id.get(user_id):
            bot.send_message(call.message.chat.id,
                             "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –ø–∞–º—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        if 0 <= index_to_delete < len(memory):
            memory.pop(index_to_delete)  # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
            user_data['memory'] = memory  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            save_user_data(user_id, user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
            memory_markup = InlineKeyboardMarkup()
            count = 0
            for el in memory:
                memory_markup.add(InlineKeyboardButton(el, callback_data=f'{count}'))
                count += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            bot.edit_message_text("–í–æ—Ç —á—Ç–æ –º—ã –æ –≤–∞—Å –ø–æ–º–Ω–∏–º:", chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, reply_markup=memory_markup)


def stub(chat_id, user_service, user_id):
    bot.send_message(chat_id, f"–û–ø–ª–∞—á–µ–Ω —Å—á–µ—Ç—á–∏–∫: {user_service.get('category', None)}")
    users_status_service.pop(user_id)

def get_markup_like_dislike_change():
    markup = InlineKeyboardMarkup()

    like = InlineKeyboardButton('üëç', callback_data='like')
    dislike = InlineKeyboardButton('üëé', callback_data='dislike')
    change = InlineKeyboardButton('üîÑ–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data='change')


    markup.add(like, dislike)
    markup.add(change)

    return markup




