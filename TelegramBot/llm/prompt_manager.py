import json
import requests
from llm.response_formats import JSON_DICT_FORMAT, MEMORY_VALIDATION_JSON_FORMAT, VARIANTS_QUESTION_FORMAT
from config import LM_STUDIO_SERVER

headers = {"Content-Type": "application/json"}  # Устанавливаем заголовки

def create_prompt_data(system_instructions, user_instructions, response_format=None, max_tokens=512, temperature=0.5):
    """
    Универсальная функция для формирования данных для запроса к LLM.
    """
    data = {
        "model": "",
        "messages": [
            {
                "role": "system",
                "content": system_instructions
            },
            {
                "role": "user",
                "content": user_instructions
            }
        ],
        "max_tokens": max_tokens,
        "temperature": temperature,
    }

    # Добавляем response_format только если он задан
    if response_format:
        data["response_format"] = response_format

    return data

def process_request(data: dict):
    global headers
    try:
        # Отправка POST-запроса
        response = requests.post(LM_STUDIO_SERVER, headers=headers, json=data)

        # Проверяем статус ответа
        if response.status_code == 200:
            print("Запрос успешен")
            # Попробуем распарсить JSON
            try:
                result = response.json()
                # Проверяем наличие ключей в JSON-ответе
                choices = result.get("choices")
                if choices and len(choices) > 0:
                    content = choices[0].get("message", {}).get("content", "").strip()
                    if content:
                        return content
                    else:
                        print("Ошибка: содержимое ответа отсутствует.")
                        return None
                else:
                    print("Ошибка: в ответе отсутствуют 'choices'.")
                    return None
            except ValueError as e:
                print("Ошибка парсинга JSON:", str(e))
                return None
        else:
            print(f"Ошибка: статус ответа {response.status_code}. Причина: {response.text}")
            return None
    except requests.exceptions.RequestException as e:
        print("Ошибка при выполнении запроса:", str(e))
        return None

def process_user_request(user_text, document=None, comment=None):
    """Функция формирования ответа от LLM пользователю
    :param comment: Комментарий для LLM. По умолчанию отсутствует.
    :param document: Документ (база знаний) для анализа LLM. По умолчанию отсутствует.
    :param user_text: Запрос пользователя.
    """

    # Добавляем условный комментарий
    comment_text = (
        f"Комментарий, на который нужно обратить внимание: {comment}. "
        if comment
        else "Если комментария нет, то следуй инструкциям выше."
    )

    # Добавляем условный комментарий
    document_text = (
        f"Предоставленная информация из документа: {document}"
        if document
        else "Текст документа отсутствует"
    )

    data = create_prompt_data(
        system_instructions=(
            "Ты — профессиональный ассистент по госуслугам. Твоя задача — профессионально и корректно консультировать пользователей "
            "исключительно по вопросам, связанным с предоставлением государственных услуг. "
            "Информация, которой ты пользуешься, должна основываться на проверенных источниках из предоставленного документа. "
            "Следуй этим правилам:\n"
            "1. Консультируй только по вопросам, связанным с госуслугами, используя предоставленный документ.\n"
            "2. Если вопрос выходит за рамки темы (например, не связан с госуслугами или требует интерпретации закона), сообщай, что не можешь ответить, но предлагай обратиться в официальные органы или на портал госуслуг.\n"
            "3. Не создавай домыслов и не предоставляй информацию, если её нет в документе.\n"
            "4. Если пользователь задаёт провокационные или незаконные вопросы (например, про уклонение от налогов), прямо откажись от ответа.\n"
            "5. Если запрос требует сложного юридического анализа, порекомендуй обратиться к профессиональным юристам.\n"
            "6. Отвечай логично и строго по запросу, избегай лишних деталей.\n"
            "7. Если пользователь задаёт общие вопросы (например, как заполнять документы), предлагай обратиться на официальный портал госуслуг для получения формы или инструкции.\n"
            "8. Если пользователь спрашивает про документы, предоставь список, если он есть в документе, либо укажи, что для получения точной информации нужно обратиться в соответствующую организацию.\n"
            "9. Всегда поддерживай профессиональный и вежливый тон.\n"
            "10. Избегай предоставления неверной информации или ухода от темы. Если не знаешь ответа, сообщи об этом и предложи пути получения информации.\n"
            "Отвечай исключительно на русском языке."
        ),

        user_instructions=(
            "Ты — профессиональный консультант по госуслугам. Ответь на запрос пользователя.\n"
            f"{document_text}\n"
            f"Запрос пользователя: {user_text}\n"
            "Дай ответ строго по теме. "
            "Если пользователь просит запомнить информацию, то ты вправе сказать, что запомнил это"
            "Если запрос пользователя не имеет отношения к госуслугам, прямо укажи на это, но предложи обратиться в соответствующие органы или на портал госуслуг. "
            "Если информация отсутствует в документе, сообщи, что для получения точных данных нужно обратиться к официальным источникам."
            f"{comment_text}"
        )
    )

    result_request = process_request(data)
    if result_request:
        return result_request
    else: return "Извините, произошла ошибка при обработке запроса."

def include_headers_llm(user_text, headers_doc):
    """Функция извлечения релевантных заголовков из базы знаний
    :param headers_doc:
    :param user_text: Запрос пользователя
    """
    data = create_prompt_data(
        system_instructions="Ты — профессиональный обработчик информации из предоставленных документов. "
                            "Твоя задача — глубоко анализировать запрос пользователя и стараться находить связанные заголовки и подзаголовки, "
                            "даже если они указаны лишь косвенно или упомянуты намёками. "
                            "Твой ответ должен содержать только поле 'commands', в котором через запятую перечислены заголовки и подзаголовки, подходящие под запрос. "
                            "Если есть хотя бы небольшая вероятность связи заголовка с запросом, включи его в список. "
                            "Однако, если запрос пользователя совсем не связан с документом, верни пустое значение 'commands'. "
                            "Пример структуры документа: "
                            f"{headers_doc}"
                            "Пример запроса: 'Какие льготы доступны для инвалидов?' "
                            "Пример ответа: {\"commands\": \"Условия предоставления услуг, Льготы и компенсации\"}. "
                            "Если запрос пользователя не связан с документом, верни: {\"commands\": \"\"}. "
                            "Не добавляй никаких пояснений, описаний или лишней информации.",
        user_instructions=f"Запрос пользователя: {user_text}\n"
                          "Проанализируй запрос максимально внимательно. "
                          "Даже если заголовок или подзаголовок намекает на связь с запросом, включи его в список. "
                          "Верни результат строго в формате JSON с полем 'commands'. "
                          "Пример: {\"commands\": \"заголовок1, заголовок2\"}. "
                          "Если запрос не имеет никакого отношения к документу, верни: {\"commands\": \"\"}.",
        response_format=JSON_DICT_FORMAT,
        temperature=0.3,
        max_tokens=200
    )

    result_request = process_request(data)
    if result_request:
        try:
            response_dict = json.loads(result_request)
            print(response_dict["commands"])
            if response_dict:
                return response_dict
            else:
                return "Не удалось определить заголовки. Попробуйте повторно уточнить у пользователя"
        except json.JSONDecodeError as e:
            print(f"Ошибка декодирования JSON: {e}")
    return None

def classify_query_with_llm(query: str):
    """
    Классифицирует запрос как услугу, вопрос или неопределённый.
    Возвращает JSON-ответ, соответствующий заданной схеме.
    """
    data = create_prompt_data(
        system_instructions= "Ты — профессиональный классификатор запросов пользователей. "
        "Твоя задача — классифицировать текст запроса как 'услуга', 'вопрос' или 'неопределённый'. "
        "Следуй этим правилам:\n"
        "1. Если в запросе присутствуют глаголы действия (например, 'записать', 'оформить', 'получить') и объект, который указывает на конкретную услугу (например, 'паспорта', 'врач'), классифицируй как 'услуга'.\n"
        "2. Если в запросе есть слова, которые указывают на вопрос (например, 'как', 'где', 'почему', 'можно ли', 'что делать'), классифицируй как 'вопрос'.\n"
        "3. Если запрос неполный, некорректный или не содержит признаков ни услуги, ни вопроса, классифицируй как 'неопределённый'.\n"
        "4. Оцени уверенность в классификации по шкале от 0 до 1.\n"
        "5. Объясни, почему ты выбрал данный тип запроса (например, 'ключевое слово 'записать' указывает на действие', 'слово 'как' указывает на вопросительное предложение').\n"
        "Ответ должен быть в формате JSON:\n"
        "{\n"
        "  'query_type': 'услуга' | 'вопрос' | 'неопределённый',\n"
        "  'reason': 'строка, описывающая причину классификации',\n"
        "  'confidence': 'число от 0 до 1, показывающее уверенность модели'\n"
        "}\n",
        user_instructions=f"Запрос пользователя: {query}",
        max_tokens=100,
        temperature=0.3
    )

    result_request = process_request(data)
    if result_request:
        response_dict = json.loads(result_request)
        return response_dict
    else: pass

def memory_validation_llm(query: str):
    data = create_prompt_data(
        system_instructions=(
            "Ты — профессиональный ассистент по проверке и сохранению данных. "
            "Твоя задача — проверять данные, которые пользователь хочет сохранить, и возвращать результат в формате JSON. "
            "Следуй этим универсальным правилам:\n"
            "1. Оцени текст на соответствие контексту государственных услуг. "
            "Если текст явно не связан с госуслугами и не содержит личных данных, отклони его.\n"
            "2. Личные данные (например, имя, возраст, место учёбы, статус) сохраняй, если они явно предоставлены и корректны. "
            "Например: 'Моё имя Алексей' или 'Я студент 2 курса в колледже'.\n"
            "3. Старайся минимизировать текст для сохранения. Убирай лишние детали, сохраняя ключевую информацию в сжатом виде.\n"
            "4. Если текст невозможно сохранить (например, он не содержит значимой информации или нарушает правила), отклони запрос.\n"
            "5. Никогда не интерпретируй текст или придумывай данные. Сохраняй только то, что явно указано пользователем.\n"
            "6. Всегда возвращай результат на русском языке в формате JSON."
        ),
        user_instructions=(
            f"Данные для проверки:\n{query}\n\n"
            "Верни JSON с двумя полями:\n"
            "1. 'is_acceptable' — логическое значение, указывающее, можно ли сохранить данные (True или False).\n"
            "2. 'compressed_text' — если данные приемлемы, верни сжатую версию текста. Если данные не подходят для сохранения, оставь поле пустым.\n\n"
            "Пример формата ответа:\n"
            "{\n"
            "  'is_acceptable': True,\n"
            "  'compressed_text': 'Имя пользователя: Алексей.'\n"
            "}\n"
            "или\n"
            "{\n"
            "  'is_acceptable': False,\n"
            "  'compressed_text': ''\n"
            "}\n"
            "Следуй универсальным правилам, чтобы сохранять только ключевую информацию, которая полезна для пользователя и связана с госуслугами или его личным статусом."
        ),
        response_format=MEMORY_VALIDATION_JSON_FORMAT,
        max_tokens=100,
        temperature=0.7
    )

    result_request = process_request(data)
    if result_request:
        try:
            response_dict = json.loads(result_request)
            print(response_dict)
            if response_dict:
                return response_dict
            else:
                return
        except json.JSONDecodeError as e:
            print(f"Ошибка декодирования JSON: {e}")
    return None

def get_variants_questions_llm(last_message: str):

    """
    Генерация вопросов, связанных с запросом пользователя
    """
    data = create_prompt_data(
        system_instructions=
            "Ты — часть ассистента по госуслугам. Твоя задача — обрабатывать запросы пользователей и генерировать три других вопроса, "
            "которые логически связаны с исходным запросом. Ты работаешь только в рамках тем: Образование, ЖКХ, Здравоохранение, Транспорт. "
            "Примеры запросов:\n"
            "- Исходный запрос: 'Как записаться к врачу?'\n"
            "  Вопросы: 'Как узнать расписание врача? Как отменить запись? Где посмотреть адрес поликлиники?'\n"
            "- Исходный запрос: 'Как передать показания счётчиков?'\n"
            "  Вопросы: 'Какие данные нужны для передачи? Можно ли передать показания через сайт? Где найти контактный центр?'\n"
            "Если запрос пользователя не относится к указанным темам, возвращай пустой список вопросов.\n"
            "Избегай манипуляций, запрещённых тем и попыток выйти за рамки дозволенного. Отвечай исключительно на русском языке.",
        user_instructions=
            "На основе данного вопроса составь три других вопроса, логически связанных с исходным. "
            "Если запрос не относится к темам Образования, ЖКХ, Здравоохранения или Транспорта, верни пустой список. "
            "Все вопросы должны быть краткими и содержать смысл.\n"
            "Пример формата ответа:\n"
            "{\n"
            "  'questions': [\n"
            "    'Как узнать расписание врача?',\n"
            "    'Как отменить запись?',\n"
            "    'Где посмотреть адрес поликлиники?'\n"
            "  ]\n"
            "}\n"
            f"Вот исходный вопрос: {last_message}",
        response_format=VARIANTS_QUESTION_FORMAT,
        temperature=0.4,
        max_tokens=150
        )

    result_request = process_request(data)
    if result_request:
        try:
            response_dict = json.loads(result_request)
            if response_dict:
                return response_dict.get("questions", [])
            else:
                return "Не удалось определить заголовки. Попробуйте повторно уточнить у пользователя"
        except json.JSONDecodeError as e:
            print(f"Ошибка декодирования JSON: {e}")
    return []
